package com.example.addressbookspring.service;

import com.example.addressbookspring.dto.AddressBookDTO;
import com.example.addressbookspring.entity.AddressBook;
import com.example.addressbookspring.exception.CustomException;
import com.example.addressbookspring.repository.AddressBookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service Class implementing IAddressService - AddressBookService
 */
@Service
public class AddressBookService implements IAddressBookService {
    /**
     * Autowired wired AddressBookRepository for inbuilt method implementations - addressBookRepository
     */
    @Autowired
    AddressBookRepository addressBookRepository;

    /**
     * Method to add contact to addressBook - addContact.
     * Create AddressBook object using addressBookDTO.
     *
     * @param addressBookDTO - Field values passed to save contact.
     * @return - AddressBook object generated by applying save method to addressBookDTO.
     */
    public AddressBook addContact(AddressBookDTO addressBookDTO) {
        AddressBook addressBook = new AddressBook(addressBookDTO);
        return addressBookRepository.save(addressBook);
    }

    /**
     * Method to get contact list from addressBook.
     * If table is empty, throw exception - No contacts in address book.
     * Else return contactList using findAll method.
     */
    public List<AddressBook> getAllContacts() {
        if (addressBookRepository.findAll().isEmpty()) {
            throw new CustomException("No contacts in address book.");
        } else return addressBookRepository.findAll();
    }

    /**
     * Method to get contact by passing id.
     * First checking if the contact associated with the id exists, if exists return addressBook object using findById method.
     * Else return exception - No contact matches with the given ID.
     *
     * @param id - Contact ID.
     */
    public Optional<AddressBook> getById(int id) {
        if (addressBookRepository.findById(id).isPresent()) {
            return addressBookRepository.findById(id);
        } else throw new CustomException("No contact matches with the given ID");
    }

    /**
     * Method to delete contact by id.
     * First checking if the contact associated with the id exists, if exists delete using deleteById method.
     *
     * @param id Contact ID.
     * @return - if exists, String for delete confirmation else throw exception.
     */
    public String deleteById(int id) {
        if (addressBookRepository.findById(id).isPresent()) {
            addressBookRepository.deleteById(id);
            return "Contact with ID: " + id + " is Deleted Successfully!!";
        } else throw new CustomException("No contact matches with the given ID");
    }

    /**
     * Method to edit contact by id.
     * First checking if the contact associated with the id exists, if exists creating addressBook object using id and addressBookDTO object
     * applying save method to created object. Else return exception
     *
     * @param addressBookDTO - Field value passed to update.
     * @param id             - Contact ID.
     */
    public AddressBook editContact(AddressBookDTO addressBookDTO, int id) {
        if (addressBookRepository.findById(id).isPresent()) {
            AddressBook addressBook = new AddressBook(id, addressBookDTO);
            return addressBookRepository.save(addressBook);
        } else throw new CustomException("No employee matches with the given ID");
    }
}
